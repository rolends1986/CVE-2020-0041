 
#include <memory.h>
 
#include <zlib.h>

class CfgFile
{

public:
    CfgFile(const QString &file);
    int encrypt(const QString &out_file);
    int decrypt(const QString &out_file);
    QString getFile() const;
    void setFile(const QString &file);

protected:
    // 01020304 return 04030201
    uint32_t order_adjustment(const uint32_t &value);

private:
    struct head {
        uint64_t magic;
        uint32_t uncompress_file_size;
        uint32_t compress_file_size;
        uint32_t compress_content_size;
        uint32_t compress_content_crc32;
        uint32_t head_block_crc32;
        uint32_t space[8];
    };
    struct data {
        uint32_t befor_compress_size;
        uint32_t after_compress_size;
        uint32_t pos_offset;
        uint8_t compress_content[0x10000];
    };
    QString file_;

    uint32_t get_crc32(const uint8_t *source, const size_t &size, const uint32_t &init_crc);
    void head_init(struct head &head_block);
    void head_change(struct head &head_block);

};

CfgFile::CfgFile(const QString &file)
{
    file_ = file;
}

int CfgFile::encrypt(const QString &out_file)
{
    QFile fout(out_file);
    QFile fin(file_);
    struct head head_block;
    struct data data_block;
    uint8_t source_buffer[0x10000];
    size_t dest_size;
    size_t source_size;
    size_t pos_offset = 60;
    uint32_t crc = 0xFFFFFFFF;

    if (!fout.open(QFile::WriteOnly)) return -1;
    if (!fin.open(QFile::ReadOnly)) {
        fout.close();
        return -1;
    }
    fout.seek(60);
    while ((source_size = fin.read((char*)source_buffer, 0x10000))) {
        dest_size = 0x10000;
        int result = compress2(data_block.compress_content, (uLongf*)&dest_size, source_buffer, source_size, 9);
        data_block.befor_compress_size = order_adjustment(source_size);
        data_block.after_compress_size = order_adjustment(dest_size);
        if ( source_size == 0x10000 ) {
            pos_offset += dest_size+12;
            data_block.pos_offset = order_adjustment(pos_offset);
        } else {
            data_block.pos_offset = result;
        }
        crc = get_crc32(data_block.compress_content, dest_size, crc);
        fout.write((char*)&data_block, dest_size+12);
    }
    head_init(head_block);
    head_block.uncompress_file_size = order_adjustment(fin.size());
    head_block.compress_file_size =  order_adjustment(fout.size());
    head_block.compress_content_crc32 =  order_adjustment(~crc);
    head_block.head_block_crc32 = order_adjustment(~get_crc32((uint8_t*)&head_block, 24, 0xFFFFFFFF));
    fout.seek(0);
    fout.write((char*)&head_block, 60);
    fout.close();
    fin.close();
    return 1;
}

int CfgFile::decrypt(const QString &out_file)
{
    QFile fout(out_file);
    QFile fin(file_);
    struct head head_block;
    struct data data_block;
    uint8_t dest_buffer[0x10000];
    uint32_t crc;
    uLongf len;

    if (!fout.open(QFile::WriteOnly)) return -1;
    if (!fin.open(QFile::ReadOnly)) {
        fout.close();
        return -1;
    }
    fin.read((char*)&head_block, 60);
    crc = get_crc32((uint8_t*)&head_block, 24, 0xFFFFFFFF);
    head_change(head_block);
    if ((head_block.magic != 0x1020304) ||
            (head_block.head_block_crc32 != ~crc)) {
        fout.close();
        fin.close();
        return -2;
    }
    crc = 0xFFFFFFFF;
    while (fin.read((char*)&data_block, 12)) {
        data_block.after_compress_size = order_adjustment(data_block.after_compress_size);
        data_block.befor_compress_size = order_adjustment(data_block.befor_compress_size);
        fin.read((char*)data_block.compress_content, data_block.after_compress_size);
        crc = get_crc32(data_block.compress_content, data_block.after_compress_size, crc);
        len = (uLongf)data_block.befor_compress_size;
        if (uncompress(dest_buffer, (uLongf*)&len, data_block.compress_content, data_block.after_compress_size)) {
            fin.close();
            fout.close();
            return -3;
        }
        fout.write((char*)dest_buffer, data_block.befor_compress_size);
    }
    if (head_block.compress_content_crc32 != ~crc) {
        fin.close();
        fout.close();
        return -4;
    }
    fin.close();
    fout.close();
    return 1;
}

QString CfgFile::getFile() const
{
    return file_;
}

void CfgFile::setFile(const QString &file)
{
    file_ = file;
}

uint32_t CfgFile::order_adjustment(const uint32_t &value)
{
    uint8_t temp[4];
    temp[0] = (uint8_t)(value >> 24);
    temp[1] = (uint8_t)(value >> 16);
    temp[2] = (uint8_t)(value >> 8);
    temp[3] = (uint8_t)(value);
    return *(uint32_t*)temp;
}

uint32_t CfgFile::get_crc32(const uint8_t *source, const size_t &size, const uint32_t &init_crc)
{
    uint32_t crc_table[256] = {
        0, 0x77073096, 0xEE0E612C, 0x990951BA, 0x76DC419, 0x706AF48F,
        0xE963A535, 0x9E6495A3, 0xEDB8832, 0x79DCB8A4, 0xE0D5E91E,
        0x97D2D988, 0x9B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91,
        0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D,
        0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0,
        0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63,
        0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,
        0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA,
        0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75,
        0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180,
        0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
        0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87,
        0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x1DB7106,
        0x98D220BC, 0xEFD5102A, 0x71B18589, 0x6B6B51F, 0x9FBFE4A5,
        0xE8B8D433, 0x7807C9A2, 0xF00F934, 0x9609A88E, 0xE10E9818,
        0x7F6A0DBB, 0x86D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4,
        0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B,
        0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA,
        0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,
        0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541,
        0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC,
        0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F,
        0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086,
        0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E,
        0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81,
        0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x3B6E20C ,
        0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x4DB2615 , 0x73DC1683,
        0xE3630B12, 0x94643B84, 0xD6D6A3E , 0x7A6A5AA8, 0xE40ECF0B,
        0x9309FF9D, 0xA00AE27 , 0x7D079EB1, 0xF00F9344, 0x8708A3D2,
        0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671,
        0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,
        0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8,
        0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767,
        0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6,
        0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79,
        0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795,
        0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28,
        0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B,
        0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x26D930A ,
        0x9C0906A9, 0xEB0E363F, 0x72076785, 0x5005713 , 0x95BF4A82,
        0xE2B87A14, 0x7BB12BAE, 0xCB61B38 , 0x92D28E9B, 0xE5D5BE0D,
        0x7CDCEFB7, 0xBDBDF21 , 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8,
        0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,
        0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF,
        0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE,
        0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D,
        0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0,
        0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C,
        0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693,
        0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02,
        0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D
    };
    uint32_t result = init_crc;
    for (size_t x=0; x<size; ++x)
        result = crc_table[(uint8_t)result ^ source[x]] ^ (result >> 8);

    return result;
}

void CfgFile::head_init(CfgFile::head &head_block)
{
    memset(&head_block, 0, 60);
    head_block.magic = 0x4030201;
    head_block.compress_content_size = 0x100;
}

void CfgFile::head_change(CfgFile::head &head_block)
{
    head_block.magic = order_adjustment(head_block.magic);
    head_block.uncompress_file_size = order_adjustment(head_block.uncompress_file_size);
    head_block.compress_file_size =  order_adjustment(head_block.compress_file_size);
    head_block.compress_content_crc32 =  order_adjustment(head_block.compress_content_crc32);
    head_block.head_block_crc32 = order_adjustment(head_block.head_block_crc32);
}